{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "demobitsadfaug2023"
		},
		"TRG_Event_PL_CopyFile_Dynamic_properties_PL_CopyFile_Dynamic_parameters_FileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"TRG_Event_PL_CopyFile_Dynamic_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/d003678d-3be9-4518-b21e-a5101bea6844/resourceGroups/demobits/providers/Microsoft.Storage/storageAccounts/demobits"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_CustomerPurchases')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Storage_demobits_oltp_purchaseorder",
								"type": "DatasetReference"
							},
							"name": "PurchaseOrder"
						},
						{
							"dataset": {
								"referenceName": "DS_Storage_demobits_oltp_customer",
								"type": "DatasetReference"
							},
							"name": "Customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_demobitsdb_CustomerPurchases",
								"type": "DatasetReference"
							},
							"name": "output"
						}
					],
					"transformations": [
						{
							"name": "PurchaseOrderProjected"
						},
						{
							"name": "CustomerProjected"
						},
						{
							"name": "DataQuality"
						},
						{
							"name": "JoinedStream"
						},
						{
							"name": "Metrics"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PurchaseOrderID as string,",
						"          { CustomerCode} as string,",
						"          ProductCode as string,",
						"          EmployeeCode as string,",
						"          { PuchaseOrderDate} as string,",
						"          { Quantity} as long,",
						"          { UnitPrice} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PurchaseOrder",
						"source(output(",
						"          CustomerCode as string,",
						"          { CustomerName} as string,",
						"          { Address} as string,",
						"          { PhoneNumber} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Customer",
						"PurchaseOrder select(mapColumn(",
						"          { CustomerCode},",
						"          { Quantity}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PurchaseOrderProjected",
						"Customer select(mapColumn(",
						"          CustomerCode,",
						"          { CustomerName}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CustomerProjected",
						"PurchaseOrderProjected filter(greater({ Quantity},0)) ~> DataQuality",
						"DataQuality, CustomerProjected join({ CustomerCode} == CustomerCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinedStream",
						"JoinedStream aggregate(groupBy({ CustomerCode},",
						"          { CustomerName}),",
						"     ProductsPurchased = sum({ Quantity})) ~> Metrics",
						"Metrics sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerName as string,",
						"          CustomerCode as string,",
						"          ProductsPurchases as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerName = { CustomerName},",
						"          CustomerCode = { CustomerCode},",
						"          ProductsPurchases = ProductsPurchased",
						"     )) ~> output"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CallDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_CustomerPurchases",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"PurchaseOrder": {},
									"Customer": {},
									"output": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-20T17:16:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_CustomerPurchases')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_IncrementalCopy_Parent')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This Pipeline is meant to load data incrementally based on a configuration table",
				"activities": [
					{
						"name": "LKP_ConfigurationTable",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM ConfigurationTable",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQL_demobitsdb_orders",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LKP_ConfigurationTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LKP_ConfigurationTable').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_IncrementalCopy_Dynamic",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"TableName": {
												"value": "@item().TableName",
												"type": "Expression"
											},
											"WaterMarkColumn": {
												"value": "@item().WaterMarkColumn",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-20T16:04:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRG_Event_PL_CopyFile_Dynamic')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_CopyFile_Dynamic",
							"type": "PipelineReference"
						},
						"parameters": {
							"FileName": "[parameters('TRG_Event_PL_CopyFile_Dynamic_properties_PL_CopyFile_Dynamic_parameters_FileName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/source/blobs/",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('TRG_Event_PL_CopyFile_Dynamic_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TRG_Tumbling_PL_IncrementalCopy_Parent')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "PL_IncrementalCopy_Parent",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2023-08-20T16:26:00Z",
					"endTime": "2023-08-20T16:56:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_IncrementalCopy_Parent')]"
			]
		}
	]
}